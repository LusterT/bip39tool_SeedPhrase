#!/usr/bin/env python

import sys, getopt
import re
from mnemonic import Mnemonic
from binascii import hexlify, unhexlify

# usage:
# bip39tool picnic scene hundred
# bip39tool --passphrase TREZOR picnic scene hundred
# bip39tool --reverse --language english 8c8396062a16ae433a47d79dff2732b5e304a37d9016db9d19f96d0459fb5cc65023d8cfa20f2b4751336a8a58fc6c9600ea9ed3ad012a11a7f3704be9477483

def help():
    print "help not implemented"

def main(argv):
    try:
        opts, args = getopt.getopt(argv, "ho:l:p:", ["help","output=","language=","passphrase="])
    except getopt.GetoptError:
        print "usage: bip39tool [-o words|seed|entropy|xprv] [-l LANGUAGE] [-p PASSPHRASE] SEED"
        sys.exit(1)

    outputtype = 'seed'
    language = 'english'
    passphrase = ''

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            help()
            sys.exit(0)
        elif opt in ("-o", "--output"):
            outputtype = arg
        elif opt in ("-l", "--language"):
            language = arg
        elif opt in ("-p", "--passphrase"):
            passphrase = arg

    inputtxt = ' '.join(args)
    inputtype = 'words'
    if re.match("^[0-9a-fA-F]{32}$", inputtxt):
        inputtype = 'entropy'

    entropy = inputtxt

    if inputtype == 'words':
        # the reason to convert words to entropy and then straight back again
        # is to sanity-check the words, e.g. in the case of words input and
        # words output
        mnemo = Mnemonic(language)
        entropy = hexlify(mnemo.to_entropy(inputtxt))

    words = mnemo.to_mnemonic(unhexlify(entropy))

    if outputtype == 'seed':
        print hexlify(Mnemonic.to_seed(words, passphrase))
    elif outputtype == 'words':
        print words
    elif outputtype == 'entropy':
        mnemo = Mnemonic(language)
        print hexlify(mnemo.to_entropy(words))
    else:
        print "output of xprv not implemented"

if __name__ == "__main__":
    main(sys.argv[1:])
